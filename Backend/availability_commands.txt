SELECT user1,
    user2,
    day,
    skill_diff
FROM (
    SELECT us1.user_id as user1,
    us2.user_id as user2,
    us1.day,
    us2.hour,
    abs(us1.skill - us2.skill) AS skill_diff
    FROM availability us1
    JOIN availability us2
        on us1.user_id != us2.user_id
        AND us1.day = us2.day
        AND us1.hour = us2.hour
    where us1.user_id = 46
        AND (2 <= us1.max_dist AND 2 <= us2.max_dist)
        ORDER BY us2.user_id asc, day asc, hour asc
) as matches;

// No distance yet

SELECT user1,
    user2,
    day,
    hour,
    skill_diff
FROM (
    SELECT us1.user_id as user1,
    us2.user_id as user2,
    us1.day,
    us2.hour,
    abs(us1.skill - us2.skill) AS skill_diff
    FROM availability us1
    JOIN availability us2
        ON us1.user_id != us2.user_id
        AND us1.day = us2.day
        AND us1.hour = us2.hour
    WHERE us1.user_id = 46
        AND (2 <= us1.max_dist AND 2 <= us2.max_dist)
        ORDER BY us2.user_id asc, day asc, hour asc
) AS Matches;

//No odering or user select yet

SELECT user1, user2, day, hour, skill_diff
FROM (
    SELECT user1,
    user2,
    day,
    hour,
    skill,
    (MY Formula) as dist_diff,
    FROM (
        SELECT us1.user_id as user1,
        us2.user_id as user2,
        us1.day,
        us1.hour,
        us1.skill,
        us2.location_x,
        us2.location_y,
        us2.max_dist,
        FROM availability us1
        JOIN availability us2
        ON us1.user_id != us2.user_id
        AND us1.day = us2.day
        AND us1.hour = us2.hour
        WHERE us1.user_id = 46
        ORDER BY us2.user_id asc, day asc, hour asc
    )
    WHERE (dist_diff <= us1.max_dist AND dist_diff <= us2.max_dist)
    )  
) AS Matches;

SELECT us1.user_id as user1,
us2.user_id as user2,
us1.day,
us1.hour,
(us1.skill - us2.skill) as skill_diff,
us1.location_x as lon1,
us1.location_y as lat1,
us1.max_dist as d1,
us2.location_x as lon2,
us2.location_y as lat2,
us2.max_dist as d2
FROM availability us1
JOIN availability us2
ON us1.user_id != us2.user_id
AND us1.day = us2.day
AND us1.hour = us2.hour
WHERE us1.user_id = 46
ORDER BY us2.user_id asc, day asc, hour asc

SELECT user1,
user2,
day,
hour,
skill_diff,
(NVL(6387.7,0) * ACOS((sin(NVL(lat1,0) / 57.29577951) * SIN(NVL(lat2,0) / 57.29577951)) +
    (COS(NVL(lat1,0) / 57.29577951) * COS(NVL(lat2,0) / 57.29577951) *
    COS(NVL(lon2,0) / 57.29577951 - NVL(lon1,0)/ 57.29577951)))) as dist_diff
FROM (Previous Call)
WHERE (dist_diff <= d1 AND dist_diff <= d2)

SELECT user1,
user2,
day,
hour,
skill_diff,
(6387.7 * ACOS((sin(lat1 / 57.29577951) * SIN(lat2 / 57.29577951)) +
    (COS(lat1 / 57.29577951) * COS(lat2 / 57.29577951) *
    COS(lon2 / 57.29577951 - lon1/ 57.29577951)))) as dist_diff
FROM (
    SELECT us1.user_id as user1,
    us2.user_id as user2,
    us1.day,
    us1.hour,
    (us1.skill - us2.skill) as skill_diff,
    us1.location_x as lon1,
    us1.location_y as lat1,
    us1.max_dist as d1,
    us2.location_x as lon2,
    us2.location_y as lat2,
    us2.max_dist as d2
    FROM availability us1
    JOIN availability us2
    ON us1.user_id != us2.user_id
    AND us1.day = us2.day
    AND us1.hour = us2.hour
    WHERE us1.user_id = 46
    ORDER BY us2.user_id asc, day asc, hour asc
) as Matches
WHERE (dist_diff <= d1 AND dist_diff <= d2);

SELECT user2 as matched_player,
day,
hour,
skill_diff
FROM (
    SELECT us1.user_id as user1,
    us2.user_id as user2,
    us1.day,
    us1.hour,
    us1.max_dist as d1,
    us2.max_dist as d2,
    (us1.skill - us2.skill) as skill_diff,
    (6387.7 * ACOS((sin(us1.location_y / 57.29577951) * SIN(us2.location_y / 57.29577951)) +
    (COS(us1.location_y / 57.29577951) * COS(us2.location_y / 57.29577951) *
    COS(us2.location_x / 57.29577951 - us1.location_x/ 57.29577951)))) as dist_diff
    FROM availability us1
    JOIN availability us2
    ON us1.user_id != us2.user_id
    AND us1.day = us2.day
    AND us1.hour = us2.hour
    WHERE us1.user_id = 46
    ORDER BY us2.user_id asc, day asc, hour asc
) as Matches
WHERE (dist_diff <= d1 AND dist_diff <= d2);

(Radians(x2 - x1)) as dlon,
(Radians(y2 - y1)) as dlat,
(Math.Sin(dlat / 2) * Math.Sin(dlat / 2)) + Math.Cos(Radians(y1)) * Math.Cos(Radians(y2)) * (Math.Sin(dlon/2) * Math.Sin(dlon /2))) as suba,
(2 * Math.Atan2(Math.Sqrt(a), Math.Srt(1-a))) as angle,
(angle * 6378.16) as dist_diff,


app.get('/users', (req, res) => {
	const sql = 'SELECT * FROM users';
	admin.messaging().sendToDevice(naomi_registrationToken, message_notification, notification_options)
	.then((response) => {
		// Response is a message ID string.
		console.log('Successfully sent message:', response);
	})
	.catch((error) => {
		console.log('Error sending message:', error);
	});
  
	db.query(sql, (err, result) => {
	  if (err) throw err;
	  res.send(result);
	});
});

app.delete('/availability/:id', (req, res) => {
	const sql = 'DELETE FROM availability WHERE user_id = ?';
  
	db.query(sql, [req.params.id], (err, result) => {
	  if (err) throw err;
	  res.send("Deleted succesfully");
	});
});

app.put('/availability/:id', (req, res) => {

    const sql = 'DELETE FROM availability WHERE user_id = ?';
  
	db.query(sql, [req.params.id], (err, result) => {
	  if (err) throw err;
	  res.send("Deleted succesfully");
	});

    var i;
    for (i = 0; i < jasonfile.length; i++) {
        const sql = 'INSERT FROM availability (user_id,day,hour,skill,locationx,location_y,max_dist)
            VALUES (user_id = ?,day = ?,hour = ?,skill = ?,location_x = ?,location_y = ?,max_dist = ?)';
    }

	db.query(sql, [req.params.id], (err, result) => {
	  if (err) throw err;
	  res.send("Deleted succesfully");
	});
});


app.post('/availability', (req, res) => {
    const sql = 'INSERT INTO availability (user_id,day,hour,skill,locationx,location_y,max_dist) VALUES (user_id = ?,day = ?,hour = ?,skill = ?,location_x = ?,location_y = ?,max_dist = ?)';
    var body = req.body;

    for(var day in body.hours_available) {
        // console.log(day);
        for(var hour in body.hours_available[day]) {
            // console.log(body.hours_available[day][hour]);

            db.query(sql, [body.user_id, day, hour, body.skill, body.x, body.y, body.max_d], (err, result) => {
                if (err) throw err;
                res.send(result)
            })
        }
    }
    
    res.send(body);
}); 


{
    "number": {"day":["Monday","Tuesday","Wednesday"],"1":["one","two","three"],"2":["two","three","four"],"0":["seven","three","four"]}
}

{
    "user_id" : ["number"]
    "hours_available": {"Monday":["1","7","14"],"Tuesday":["3"],"Wednesday":["6","7","8"],"Thursday":["14","18"]}
}

CREATE OR REPLACE FUNCTION distance (Lat1 IN NUMBER,
                                     Lon1 IN NUMBER,
                                     Lat2 IN NUMBER,
                                     Lon2 IN NUMBER) RETURN NUMBER IS
 -- Convert degrees to radians
 57.29577951 NUMBER := 57.29577951;

BEGIN
  RETURN(NVL(6387.7,0) * ACOS((sin(NVL(Lat1,0) / 57.29577951) * SIN(NVL(Lat2,0) / 57.29577951)) +
        (COS(NVL(Lat1,0) / 57.29577951) * COS(NVL(Lat2,0) / 57.29577951) *
         COS(NVL(Lon2,0) / 57.29577951 - NVL(Lon1,0)/ 57.29577951))));
END;

CREATE OR REPLACE FUNCTION distance (Lat1 DOUBLE, Lon1 DOUBLE, Lat2 DOUBLE, Lon2 DOUBLE)
RETURN DOUBLE DETERMINISTIC

RETURN(NVL(6387.7,0) * ACOS((sin(NVL(Lat1,0) / 57.29577951) * SIN(NVL(Lat2,0) / 57.29577951)) +
(COS(NVL(Lat1,0) / 57.29577951) * COS(NVL(Lat2,0) / 57.29577951) *
COS(NVL(Lon2,0) / 57.29577951 - NVL(Lon1,0)/ 57.29577951))));
